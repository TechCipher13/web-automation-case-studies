import { AppID, OptionalTeamAssignable, TokenOverridable, CursorPaginationEnabled, TraditionalPagingEnabled } from './common';
import { OptionalArgument } from '../helpers';
export type TeamAccessLogsArguments = OptionalArgument<TokenOverridable & CursorPaginationEnabled & TraditionalPagingEnabled & OptionalTeamAssignable & {
    /**
     * @description End of time range of logs to include in results (inclusive) as a UNIX timestamp in seconds.
     * Default to now.
     */
    before?: number;
}>;
export type TeamBillableInfoArguments = OptionalArgument<TokenOverridable & CursorPaginationEnabled & OptionalTeamAssignable & {
    /** @description A user to retrieve the billable information for. Defaults to all users. */
    user?: string;
}>;
export type TeamBillingInfoArguments = OptionalArgument<TokenOverridable>;
export type TeamInfoArguments = OptionalArgument<TokenOverridable & {
    /**
     * @description Query by domain instead of team (only when `team` is null). This only works for domains in the same
     * enterprise as the querying team token.
     * This also expects the domain to belong to a team and not the enterprise itself.
     */
    domain?: string;
    /** @description Team to get info about; if omitted, will return information about the current team. */
    team?: string;
}>;
export type TeamIntegrationLogsArguments = OptionalArgument<Partial<AppID> & TokenOverridable & OptionalTeamAssignable & TraditionalPagingEnabled & {
    /** @description Filter logs with this change type. Defaults to all logs. */
    change_type?: 'added' | 'removed' | 'enabled' | 'disabled' | 'updated';
    /** @description Filter logs to this service. Defaults to all logs. */
    service_id?: string;
    /** @description Filter logs generated by this userâ€™s actions. Defaults to all logs. */
    user?: string;
}>;
export type TeamProfileGetArguments = OptionalArgument<TokenOverridable & {
    /** @description Filter by visibility. */
    visibility?: 'all' | 'visible' | 'hidden';
}>;
export type TeamPreferencesListArguments = OptionalArgument<TokenOverridable>;
//# sourceMappingURL=team.d.ts.map